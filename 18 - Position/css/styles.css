/*
    La propiedad position nos permite posicionar los elementos. Hay algunos conceptos que debeis conocer para entender position.

    Flujo de renderizado -> Por norma general los elementos se dibujan de izquierda a derecha y de arriba abajo. El punto 0,0 de los elementos, por norma general, es la esquina superior izquierda.

    Espacio reservado -> Es el espacio que tiene un elemento asignado en el navegador.

    Elemento posicionado -> Esto significa que el elemento tiene la propiedad position con un valor distinto de "static", que es el valor que tiene esta propiedad por defecto.

    Stackin context -> Contexto de apilamiento. Es el orden en el que se apilarán las cajas que se superponen, dentro del mismo contenedor.

    Al posicionar un elemento se habilitan 5 propiedades que podemos utilizar para mover los elementos en los 3 ejes.

	top -> El elemento se moverá desde la parte superior la distancia que le hayamos indicado.

    right -> El elemento se moverá desde la parte derecha la distancia que le hayamos indicado.

    bottom -> El elemento moverá desde la parte inferior la distancia que le hayamos indicado.

    left -> El elemento moverá desde la parte izquierda la distancia que le hayamos indicado.

    z-index -> Nos permite mover el elemento en el contexto de apilamiento (eje z)

    NOTA: Si a un elemento le declaramos la propiedad top y/o left, las propiedades bottom y/o right no funcionarán.

    Los posibles valores que le podemos dar a position son.
        Static -> Es el valor que tiene por defecto un elemento, con este valor el elemento NO ESTÁ POSICIONADO y por lo cual no podremos moverlo

        Relative -> El elemento mantendrá su posición y medidas en el flujo de renderizado y mantendrá su espacio reservado. Si lo movemos lo hará usando su posición en el html como punto de referencia.

        Absolute -> El elemento perderá sus medidas y su espacio reservado. Si lo movemos usará el elemento padre posicionado como referencia. Si no tiene ninguno, usará el elemento html de referencia.

        Fixed -> El elemento perderá sus medidas y su espacio reservado.
        Si lo movemos usará el elemento html de referencia, y además se quedará fijo en esa posición aunque hagamos scroll.

        Sticky -> Es una mezcla de position relative y fixed.
        Con este tipo de posicionamiento los valores top, left, bottom y right no sirven para mover el elemento, si no para indicarle en que punto pasará a tener un comportamiento de posicionamiento fixed, hasta llegar a ese punto se comportará como si tuviera relative.

    z-index: Es la propiedad que nos permite ordenar los elementos superpuestos para controlar cual se coloca por delante y cual por detrás.
*/

*{
    box-sizing: border-box;
}

body{
    margin: 0;
    background-color: #333;
    color: #fff;
    /* padding-top: 70px; */
}

/* CSS para Position fixed y sticky*/
/* .header{
    text-align: center; */
    /* padding: 25px 0; */
    /* background-color: lightskyblue;
    color: orangered; */
    /*position: fixed;*/ /*Para que al hacer scroll se mantenga fijo la cabecera*/
    /*top: 0;*/ /*Para que quede arriba del todo*/
    /*width: 100%;*/ /*Ocupa el 100% del ancho*/
    /* position: sticky;
    top: 0; */
    /* height: 400px; */
    /*overflow: hidden;*/ /*La propiedad overflow no tiene que estar declarada para q funcione sticky*/
/*}*/

/* .menu{
    position: sticky;
    top: 0;
}

article{
    outline: 3px solid red;
}

.article-title{
    position: sticky;
    top: 0;
    background-color: #333;
    margin: 0;
} */

/* img{
    width: 100%;
    display: block;
} */

/* Demostración que a pesar de ser un elemento en linea, al usar position fixed aparte de perder su espacio reservado se puede modificar sus medidas */
/* .link{
    position: fixed;
    background-color: lightcoral;
    width: 200px;
} */

/* CSS para Position absolute*/
.box{
    width: 100px;
    height: 100px;
    text-align: center;
    color: #333;
}

.container{
    width: 200px;
    height: 200px;
    background-color: #555;
    /* position: absolute; */
    position: relative;
}

.box-1{
    background-color: lightcoral;
    /* position: relative;
    border-radius: 50px;
    top: 100px;
    left: 100px; */
    /* position: absolute;
    right: 0;
    bottom: 0; */
    position: relative;
    left: 150px;
    z-index: -1; /*indispensable que el padre no tenga ningun z-index declarado para que el hijo se mantenga detras del padre*/
}

.box-1-2{
    background-color: aquamarine;
    position: relative;
    left: 150px;
    top: -25px;
    z-index: -2; /*Para colocar detras de otro z-index negativo hay que colocar un numero mas pequeño en este caso -2*/
}

.box-2{
    background-color: lightgreen;
    position: relative;
    /* position: absolute;
    right: 0;
    bottom: 0; */
    top: 50px;
    z-index: 20; /*Prevalece el n° mayor del z-index (no recomendable usar n° consecutivos para ordenar elementos tarde o temprano las app crecen y si necesitan añadir más n° z-index dentro del mismo es necesario que haya una cantidad de n° disponibles)*/
}

.box-3{
    background-color: lightseagreen;
    position: relative;
    z-index: 10;
}

/* .link{
    position: absolute;
    background-color: lime;
    width: 200px;
    top: 50px;
} */